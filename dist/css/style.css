/* normalize.css v7.0.0 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/* Sections
     ========================================================================== */
/**
   * Remove the margin in all browsers (opinionated).
   */
body {
  margin: 0; }

/**
   * Add the correct display in IE 9-.
   */
article,
aside,
footer,
header,
nav,
section {
  display: block; }

/**
   * Correct the font size and margin on `h1` elements within `section` and
   * `article` contexts in Chrome, Firefox, and Safari.
   */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
     ========================================================================== */
/**
   * Add the correct display in IE 9-.
   * 1. Add the correct display in IE.
   */
figcaption,
figure,
main {
  /* 1 */
  display: block; }

/**
   * Add the correct margin in IE 8.
   */
figure {
  margin: 1em 40px; }

/**
   * 1. Add the correct box sizing in Firefox.
   * 2. Show the overflow in Edge and IE.
   */
hr {
  -webkit-box-sizing: content-box;
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
   * 1. Correct the inheritance and scaling of font size in all browsers.
   * 2. Correct the odd `em` font sizing in all browsers.
   */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Text-level semantics
     ========================================================================== */
/**
   * 1. Remove the gray background on active links in IE 10.
   * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
   */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */ }

/**
   * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
   * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
   */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
  text-decoration: underline dotted;
  /* 2 */ }

/**
   * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
   */
b,
strong {
  font-weight: inherit; }

/**
   * Add the correct font weight in Chrome, Edge, and Safari.
   */
b,
strong {
  font-weight: bolder; }

/**
   * 1. Correct the inheritance and scaling of font size in all browsers.
   * 2. Correct the odd `em` font sizing in all browsers.
   */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
   * Add the correct font style in Android 4.3-.
   */
dfn {
  font-style: italic; }

/**
   * Add the correct background and color in IE 9-.
   */
mark {
  background-color: #ff0;
  color: #000; }

/**
   * Add the correct font size in all browsers.
   */
small {
  font-size: 80%; }

/**
   * Prevent `sub` and `sup` elements from affecting the line height in
   * all browsers.
   */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
     ========================================================================== */
/**
   * Add the correct display in IE 9-.
   */
audio,
video {
  display: inline-block; }

/**
   * Add the correct display in iOS 4-7.
   */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
   * Remove the border on images inside links in IE 10-.
   */
img {
  border-style: none; }

/**
   * Hide the overflow in IE.
   */
svg:not(:root) {
  overflow: hidden; }

/* Forms
     ========================================================================== */
/**
   * 1. Change the font styles in all browsers (opinionated).
   * 2. Remove the margin in Firefox and Safari.
   */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
   * Show the overflow in IE.
   * 1. Show the overflow in Edge.
   */
button,
input {
  /* 1 */
  overflow: visible; }

/**
   * Remove the inheritance of text transform in Edge, Firefox, and IE.
   * 1. Remove the inheritance of text transform in Firefox.
   */
button,
select {
  /* 1 */
  text-transform: none; }

/**
   * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
   *    controls in Android 4.
   * 2. Correct the inability to style clickable types in iOS and Safari.
   */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */ }

/**
   * Remove the inner border and padding in Firefox.
   */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
   * Restore the focus styles unset by the previous rule.
   */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
   * Correct the padding in Firefox.
   */
fieldset {
  padding: 0.35em 0.75em 0.625em; }

/**
   * 1. Correct the text wrapping in Edge and IE.
   * 2. Correct the color inheritance from `fieldset` elements in IE.
   * 3. Remove the padding so developers are not caught out when they zero out
   *    `fieldset` elements in all browsers.
   */
legend {
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
   * 1. Add the correct display in IE 9-.
   * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
   */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
   * Remove the default vertical scrollbar in IE.
   */
textarea {
  overflow: auto; }

/**
   * 1. Add the correct box sizing in IE 10-.
   * 2. Remove the padding in IE 10-.
   */
[type="checkbox"],
[type="radio"] {
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
   * Correct the cursor style of increment and decrement buttons in Chrome.
   */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
   * 1. Correct the odd appearance in Chrome and Safari.
   * 2. Correct the outline style in Safari.
   */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }

/**
   * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
   */
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
   * 1. Correct the inability to style clickable types in iOS and Safari.
   * 2. Change font properties to `inherit` in Safari.
   */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/* Interactive
     ========================================================================== */
/*
   * Add the correct display in IE 9-.
   * 1. Add the correct display in Edge, IE, and Firefox.
   */
details,
menu {
  display: block; }

/*
   * Add the correct display in all browsers.
   */
summary {
  display: list-item; }

/* Scripting
     ========================================================================== */
/**
   * Add the correct display in IE 9-.
   */
canvas {
  display: inline-block; }

/**
   * Add the correct display in IE.
   */
template {
  display: none; }

/* Hidden
     ========================================================================== */
/**
   * Add the correct display in IE 10-.
   */
[hidden] {
  display: none; }

:root {
  --navHeight: 6.25vw; }

html {
  min-width: 300px; }

* {
  -webkit-box-sizing: border-box;
  box-sizing: border-box; }

*:before,
*:after {
  -webkit-box-sizing: border-box;
  box-sizing: border-box; }

h1,
h2,
h3,
h4,
h5,
h6,
p,
ul {
  margin: 0 0 15px;
  padding: 0; }

input,
button,
select,
textarea {
  font-family: inherit;
  font-size: inherit;
  line-height: inherit; }

@font-face {
  font-family: 'Whitney Bold';
  src: url("../../assets/fonts/Whitney-Bold.otf");
  font-style: normal;
  font-weight: 700; }

@font-face {
  font-family: 'Whitney Semibold';
  src: url("../../assets/fonts/Whitney-Semibold.otf");
  font-style: normal;
  font-weight: 600; }

@font-face {
  font-family: 'Whitney Medium';
  src: url("../../assets/fonts/Whitney-Medium.otf");
  font-style: normal;
  font-weight: 500; }

.text-component .caption {
  font-family: 'Whitney Semibold';
  font-weight: 600; }

.text-component h1, .text-component h2, .text-component h3, .text-component h4, .text-component h5, .text-component h6, .accordion .toggle {
  font-family: 'Whitney Semibold';
  font-weight: 700; }

body {
  font-family: 'Whitney Medium', sans-serif; }

a {
  text-decoration: none; }

body {
  --gradientHeight: 300px;
  --gradientPosTop: calc(100vh - var(--gradientHeight));
  --imageHeight: calc(100vw * (2 / 3));
  --fadePosTop: calc(var(--imageHeight) - var(--gradientHeight));
  --bodyPaddingX: 17.8vw;
  --bodyPaddingBottom: 15.9vw;
  background: -webkit-gradient(linear, left top, left bottom, from(transparent), to(rgba(128, 163, 156, 0.8))), url("../../assets/images/ruthie-163318-unsplash.jpg") #80a39c;
  background: linear-gradient(to bottom, transparent var(--gradientPosTop), rgba(128, 163, 156, 0.8) calc(var(--gradientPosTop) + var(--gradientHeight))), url("../../assets/images/ruthie-163318-unsplash.jpg") #80a39c;
  background-position: 0 0, 0 0;
  background-size: 100vw 100%, 100vw var(--imageHeight);
  background-repeat: no-repeat, no-repeat;
  background-attachment: scroll, fixed;
  padding: var(--navHeight) var(--bodyPaddingX) var(--bodyPaddingBottom);
  position: relative;
  z-index: -20; }
  body:before {
    content: '';
    height: var(--gradientHeight);
    width: 100%;
    position: fixed;
    top: var(--fadePosTop);
    left: 0;
    background-image: -webkit-gradient(linear, left bottom, left top, from(#80a39c), to(transparent));
    background-image: linear-gradient(to top, #80a39c, transparent);
    z-index: -10; }

#section-title {
  --sectionTitleSize: 2.6vw;
  --sectionTitleHeight: 15vw;
  height: var(--sectionTitleHeight);
  color: #fdfffe;
  font-size: var(--sectionTitleSize);
  font-weight: 500;
  letter-spacing: 1px;
  text-transform: uppercase;
  text-shadow: 0 0 8px rgba(0, 0, 0, 0.6);
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center; }

#site-nav {
  --listWidth: 46vw;
  --listSize: 1vw;
  background-image: -webkit-gradient(linear, left top, left bottom, from(rgba(0, 0, 0, 0.8)), to(transparent));
  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.8), transparent);
  height: var(--navHeight);
  width: 100vw;
  position: fixed;
  top: 0;
  left: 0;
  color: #fdfffe;
  font-size: var(--listSize);
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center; }
  #site-nav ul {
    width: var(--listWidth);
    list-style: none;
    padding-left: 0;
    margin-bottom: 0;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
    justify-content: space-between; }
  #site-nav a {
    color: #fdfffe; }

#search {
  --searchRight: 5vw;
  height: 100%;
  background-color: transparent;
  border: none;
  color: #fdfffe;
  cursor: pointer;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  position: absolute;
  right: var(--searchRight); }

#main-nav {
  --mainNavHeight: 7.1vw;
  --mainNavMarginBottom: 3.6vw;
  --mainNavSz: 1vw;
  height: var(--mainNavHeight);
  margin-bottom: var(--mainNavMarginBottom);
  font-size: var(--mainNavSz); }
  #main-nav ul {
    height: 100%;
    list-style: none;
    padding-left: 0;
    margin-bottom: 0;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex; }
    #main-nav ul li {
      -ms-flex-preferred-size: 25%;
      flex-basis: 25%;
      height: 100%; }
      #main-nav ul li:not(:last-child) {
        border-right: 1px solid rgba(253, 255, 254, 0.2); }
      #main-nav ul li:not(:first-child) {
        border-left: 1px solid rgba(253, 255, 254, 0.2); }
      #main-nav ul li:not(.active) {
        background-color: rgba(46, 58, 58, 0.8); }
      #main-nav ul li.active {
        background-color: rgba(5, 99, 125, 0.8); }
    #main-nav ul a {
      height: 100%;
      width: 100%;
      color: #fdfffe;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center; }

main {
  --mainPaddingX: 7.1vw;
  --mainPaddingY: 6.8vw;
  width: 100%;
  padding: var(--mainPaddingY) var(--mainPaddingX);
  background-color: rgba(46, 58, 58, 0.8);
  color: #fdfffe; }

.content {
  --contentMarginBottom: 5.5vw;
  margin-bottom: var(--contentMarginBottom); }

.text-component {
  --textPaddingX: 6.4vw;
  padding: 0 var(--textPaddingX); }
  .text-component .caption {
    --captionLine: 2.5vw;
    --captionSize: 1.3vw;
    --captionMarginBottom: 3.6vw;
    font-size: var(--captionSize);
    line-height: var(--captionLine);
    margin-bottom: var(--captionMarginBottom); }
  .text-component h1, .text-component h2, .text-component h3, .text-component h4, .text-component h5, .text-component h6 {
    --headingSize: 1.3vw;
    --headingMarginBottom: 2vw;
    font-size: var(--headingSize);
    margin-bottom: var(--headingMarginBottom); }
  .text-component p {
    --pSize: 1vw;
    --pLine: 2vw;
    --pMarginBottom: 1.4vw;
    font-size: var(--pSize);
    line-height: var(--pLine);
    margin-bottom: var(--pMarginBottom); }
  .text-component a {
    color: inherit;
    text-decoration: underline; }

.image-component {
  --imagePaddingTop: 3.6vw;
  --imagePaddingBottom: 8.2vw;
  width: 100%;
  margin: var(--imagePaddingTop) 0 var(--imagePaddingBottom); }

.accordion .toggle {
  --toggleHeight: 7.1vw;
  --toggleSize: 1.3vw;
  --togglePaddingX: 3.6vw;
  height: var(--toggleHeight);
  border: none;
  width: 100%;
  background-color: transparent;
  color: #fdfffe;
  font-size: var(--toggleSize);
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -ms-flex-pack: justify;
  justify-content: space-between;
  border-bottom: 2px solid rgba(253, 255, 254, 0.2);
  padding: 0 var(--togglePaddingX);
  cursor: pointer; }
  .accordion .toggle > * {
    height: 100%;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center; }

.accordion .open {
  background-color: #05637d;
  border: none; }

.accordion .text-component {
  --textPaddingY: 7vw;
  padding: var(--textPaddingY);
  background-color: #ececec;
  color: #343434; }

.accordion .visually-hidden {
  /* https://snook.ca/archives/html_and_css/hiding-content-for-accessibility */
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px 1px 1px 1px);
  /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px); }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
